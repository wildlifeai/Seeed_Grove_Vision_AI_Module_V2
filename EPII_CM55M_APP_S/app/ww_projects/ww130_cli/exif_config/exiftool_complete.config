# Complete ExifTool configuration for custom EXIF tags with validation fix
# This file combines detailed tag definitions with validation override

# =====================================
# Custom Tag Definitions
# =====================================

%Image::ExifTool::UserDefined = (
    'Image::ExifTool::Exif::Main' => {
        # Media Information IFD (0xF100)
        0xF100 => {
            Name => 'MediaInfoIFD',
            Groups => { 0 => 'EXIF', 1 => 'MediaInfo' },
            Writable => 'int32u',
            Flags => 'SubIFD',
            SubDirectory => {
                TagTable => 'Image::ExifTool::UserDefined::MediaInfo',
                DirStart => '$val',
            },
        },
        # Deployment Information - can be either a direct string or an IFD pointer
        0xF200 => {
            Name => 'DeploymentID',
            Groups => { 0 => 'EXIF', 1 => 'DeploymentInfo' },
            Writable => 'string',
            Description => 'Deployment Identifier',
        },
        # Project Information
        0xF201 => {
            Name => 'DeploymentProject',
            Groups => { 0 => 'EXIF', 1 => 'DeploymentInfo' },
            Writable => 'string',
            Description => 'Deployment Project Name',
        },
        # Observation Information - can be either a direct string or an IFD pointer
        0xF300 => {
            Name => 'ObservationID',
            Groups => { 0 => 'EXIF', 1 => 'ObservationInfo' },
            Writable => 'string',
            Description => 'Observation Identifier',
        },
        # Observation Type
        0xF301 => {
            Name => 'ObservationType',
            Groups => { 0 => 'EXIF', 1 => 'ObservationInfo' },
            Writable => 'string',
            Description => 'Type of Observation',
        },
    },
);

# Media Information Tags
%Image::ExifTool::UserDefined::MediaInfo = (
    GROUPS => { 0 => 'EXIF', 1 => 'MediaInfo', 2 => 'Image' },
    0xF101 => {
        Name => 'MediaID',
        Writable => 'string',
        Description => 'Media Identifier',
    },
    0xF102 => {
        Name => 'DeploymentString',
        Writable => 'string',
        Description => 'Deployment Reference Code',
    },
    0xF103 => {
        Name => 'Timestamp',
        Writable => 'string',
        Description => 'Media Timestamp',
        PrintConv => '$self->ConvertDateTime($val)',
        PrintConvInv => '$self->InverseDateTime($val)',
    },
    0xF104 => {
        Name => 'FilePath',
        Writable => 'string',
        Description => 'Original File Path',
    },
    0xF105 => {
        Name => 'FilePublic',
        Writable => 'int16u',
        Description => 'File is Public',
        PrintConv => { 0 => 'No', 1 => 'Yes' },
        PrintConvInv => { 'No' => 0, 'Yes' => 1, 0 => 0, 1 => 1 },
    },
    0xF106 => {
        Name => 'FileMediaType',
        Writable => 'string',
        Description => 'Media Type',
        PrintConv => {
            'image' => 'Image',
            'video' => 'Video',
            'audio' => 'Audio',
        },
        PrintConvInv => {
            'Image' => 'image',
            'Video' => 'video',
            'Audio' => 'audio',
            'image' => 'image',
            'video' => 'video',
            'audio' => 'audio',
        },
    },
);

# Deployment Information Tags
%Image::ExifTool::UserDefined::DeploymentInfo = (
    GROUPS => { 0 => 'EXIF', 1 => 'DeploymentInfo', 2 => 'Location' },
    0xF201 => {
        Name => 'DeploymentStringDup',
        Writable => 'string',
        Description => 'Deployment Reference Code',
    },
    0xF202 => {
        Name => 'LatitudeDecimal',
        Writable => 'rational64s',
        Description => 'Latitude in Decimal Degrees',
        PrintConv => 'sprintf("%.6f degrees", $val)',
        PrintConvInv => '$val =~ s/\s*degrees$//; $val',
    },
    0xF203 => {
        Name => 'LongitudeDecimal',
        Writable => 'rational64s',
        Description => 'Longitude in Decimal Degrees',
        PrintConv => 'sprintf("%.6f degrees", $val)',
        PrintConvInv => '$val =~ s/\s*degrees$//; $val',
    },
    0xF204 => {
        Name => 'DeploymentStartTime',
        Writable => 'string',
        Description => 'Deployment Start Time',
        PrintConv => '$self->ConvertDateTime($val)',
        PrintConvInv => '$self->InverseDateTime($val)',
    },
    0xF205 => {
        Name => 'DeploymentEndTime',
        Writable => 'string',
        Description => 'Deployment End Time',
        PrintConv => '$self->ConvertDateTime($val)',
        PrintConvInv => '$self->InverseDateTime($val)',
    },
);

# Observation Information Tags
%Image::ExifTool::UserDefined::ObservationInfo = (
    GROUPS => { 0 => 'EXIF', 1 => 'ObservationInfo', 2 => 'Image' },
    0xF301 => {
        Name => 'ObservationID',
        Writable => 'string',
        Description => 'Observation Identifier',
    },
    0xF302 => {
        Name => 'DeploymentStringDup2',
        Writable => 'string',
        Description => 'Deployment Reference Code',
    },
    0xF303 => {
        Name => 'EventStart',
        Writable => 'string',
        Description => 'Event Start Time',
        PrintConv => '$self->ConvertDateTime($val)',
        PrintConvInv => '$self->InverseDateTime($val)',
    },
    0xF304 => {
        Name => 'EventEnd',
        Writable => 'string',
        Description => 'Event End Time',
        PrintConv => '$self->ConvertDateTime($val)',
        PrintConvInv => '$self->InverseDateTime($val)',
    },
    0xF305 => {
        Name => 'ObservationNotes',
        Writable => 'string',
        Description => 'Observation Notes',
    },
    0xF306 => {
        Name => 'ObservationType',
        Writable => 'int16u',
        Description => 'Observation Type',
        PrintConv => {
            0 => 'Animal',
            1 => 'Human',
            2 => 'Vehicle',
            3 => 'Blank',
            4 => 'Unknown',
            5 => 'Unclassified',
        },
        PrintConvInv => {
            'Animal' => 0,
            'Human' => 1,
            'Vehicle' => 2,
            'Blank' => 3,
            'Unknown' => 4,
            'Unclassified' => 5,
            0 => 0, 1 => 1, 2 => 2, 3 => 3, 4 => 4, 5 => 5,
        },
    },
);

# =====================================
# Validation Fix
# =====================================

# List of tags that should not be validated
my @skipTags = (
    0xf100, 0xf200, 0xf300,  # Main IFD pointers
    0xf101, 0xf102, 0xf103, 0xf104, 0xf105, 0xf106,  # Media Info tags
    0xf201, 0xf202, 0xf203, 0xf204, 0xf205,          # Deployment Info tags
    0xf301, 0xf302, 0xf303, 0xf304, 0xf305, 0xf306   # Observation Info tags
);

# Validation hook to suppress warnings for our custom tags
BEGIN {
    # Load the Validate module if needed
    require Image::ExifTool::Validate;
    
    # Create a reference to the original CheckTagValue function
    *OLD_CheckTagValue = *Image::ExifTool::Validate::CheckTagValue;
    
    # Override the CheckTagValue function to skip validation for our custom tags
    package Image::ExifTool::Validate;
    no warnings 'redefine';
    
    sub CheckTagValue {
        my ($tagID, $format, $count, $value, $tagName, $dirName) = @_;
        
        # Skip validation for our custom tags
        if (defined $tagID) {
            foreach my $skipTag (@skipTags) {
                return '' if ($tagID == $skipTag);
            }
        }
        
        # Otherwise, call the original function
        return OLD_CheckTagValue($tagID, $format, $count, $value, $tagName, $dirName);
    }
}

# Global options
%Image::ExifTool::UserDefined::Options = (
    IgnoreMinorErrors => 1,
    SortByTag => 1,    # Sort output by tag name
    Duplicates => 0,   # Don't create duplicate tags
);

1;  # End of config file (required) 